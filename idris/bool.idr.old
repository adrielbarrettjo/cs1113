-- total functions
-- block comments
-- symbolic arguments
-- pattern matching: any argument

module bool
import pair

data bool = true | false

id_bool: bool -> bool
id_bool b = b

constFalse: bool -> bool
constFalse _ = false

constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true

------------------------------------------------------------------

---given a pair of bool values, (a, b), return true if both a and b are true, otherwise return false
andp: pair bool bool -> bool
andp (mkPair true true) = true
andp (mkPair _ _ ) = false

--- given a pair of bool values, (a, b), return false if both a and b are false, otherwise return true
orp: pair bool bool -> bool
orp (mkPair false false) = false
orp (mkPair _ _ ) = true

---or function
or: pair bool bool -> bool
or (mkPair false false) = false
or (mkPair _ _) = true

--- short for "not and", given a pair of bool values, (a, b), return false if both
--- a and b are true, and true otherwise
nand: pair bool bool -> bool
nand (mkPair true true ) = false
nand (mkPair _ _ ) = true

--- short for "exclusive or", given a pair of bool values, (a, b), return true if
--- exactly one of a or b is true, and false otherwise
xor: pair bool bool -> bool
xor (mkPair true false) = true
xor (mkPair false true) = true
xor (mkPair _ _) = false


-------------------------------------------------------------------------------------
{-Exam Problem #2: There are (2^4 = 16) possible ways to fill in the result column for
 a truth table for a binary Boolean function, and there are thus exactly 16
 such functions, and no more.
-}

pand: bool -> (bool -> bool)
pand true = id_bool
pand false = constFalse

por: bool -> bool -> bool
por true = constTrue
por false = id_bool

pnand: bool -> bool -> bool
pnand true = not
pnand false = constTrue

pxor: bool -> bool -> bool
pxor true = not
pxor false = id_bool

{-alternative
pxor: bool -> bool -> bool
pxor true false = true
pxor false true = true
pxor _ _ = false -}
